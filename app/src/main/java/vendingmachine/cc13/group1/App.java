/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package vendingmachine.cc13.group1;

import java.util.ArrayList;

import org.beryx.textio.ReadAbortedException;
import org.beryx.textio.TextIO;
import org.beryx.textio.TextIoFactory;
import vendingmachine.cc13.group1.frontend.*;
import vendingmachine.cc13.group1.frontend.seller.*;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        TextIO textIO = TextIoFactory.getTextIO();
        textIO.getTextTerminal().getProperties().setPaneWidth(900);
        textIO.getTextTerminal().getProperties().setPaneHeight(900);
        ProductList products = new ProductList("products.csv");
        RegisterPrompt register = new RegisterPrompt("customerPasswords.csv", "customerCards.csv");
        LoginPrompt login = new LoginPrompt();
        LogoutMessage logout = new LogoutMessage();
        HelpMenu helpMenu = new HelpMenu();
        TransactionPrompt transact = new TransactionPrompt("transactions.json");
        LastFiveProducts lastFive = new LastFiveProducts();
        TransactionReportMenu transactionReport = new TransactionReportMenu("transactions.json");
        ItemReports itemReports = new ItemReports();
        AddProduct addProduct = new AddProduct(products);
        FillProduct fillProduct = new FillProduct();
        ModifyProduct modifyProduct = new ModifyProduct();
        UsersReport userRolesReport = new UsersReport();
        Summary sellerSummary = new Summary("seller_summary.csv");
        ChangeReport changeReport = new ChangeReport();
        CashPayment cp = new CashPayment();

        helpMenu.registerCmdHelp("products", "Show the available products.")
                .registerCmdHelp("buy", "Buy product(s).")
                .registerCmdHelp("register", "Register an account.")
                .registerCmdHelp("login", "Login to your account.")
                .registerCmdHelp("logout", "Logout of your account.")
                .registerCmdHelp("help", "Display this help message.")
                .registerCmdHelp("transactions", "(Staff) Generates a CSV report of transactions.")
                .registerCmdHelp("items", "(Staff) Generates a CSV report of available items.")
                .registerCmdHelp("add_product", "(Staff) Add a new product to the vending machine.")
                .registerCmdHelp("fill_product", "(Staff) Add more stock of a product.")
                .registerCmdHelp("modify_product", "(Staff) Modify details of a product.")
                .registerCmdHelp("user_roles", "(Staff) Generates a CSV report of all users and their roles.")
                .registerCmdHelp("summary", "(Staff) Generates a CSV summary for items sold.")
                .registerCmdHelp("change", "(Staff) Generates a CSV summary of available change.")
                .registerCmdHelp("modify_change", "(Owner) Modify the amount of cash in the register.");

        String page = "default";
        boolean loop = true;
        helpMenu.accept(textIO);
        while (loop) {
            try {
                switch (page) {
                    case "products":
                        products.accept(textIO);
                        break;
                    case "buy":
                        products.accept(textIO);
                        transact.accept(textIO);
                        break;
                    case "register":
                        register.accept(textIO);
                        break;
                    case "login":
                        login.accept(textIO);
                        products.accept(textIO);
                        lastFive.accept(textIO);
                        break;
                    case "logout":
                        logout.accept(textIO);
                        products.accept(textIO);
                        lastFive.accept(textIO);
                        break;
                    case "help":
                        helpMenu.accept(textIO);
                        break;
                    case "default":
                        products.accept(textIO);
                        lastFive.accept(textIO);
                        break;
                    case "transactions":
                        transactionReport.accept(textIO);
                        break;
                    case "items":
                        itemReports.accept(textIO);
                        break;
                    case "add_product":
                        addProduct.accept(textIO);
                        break;
                    case "fill_product":
                        fillProduct.accept(textIO);
                        break;
                    case "modify_product":
                        modifyProduct.accept(textIO);
                        break;
                    case "user_roles":
                        userRolesReport.accept(textIO);
                        break;
                    case "summary":
                        sellerSummary.accept(textIO);
                        break;
                    case "change":
                        changeReport.accept(textIO);
                        break;
                    case "modify_change":
                        cp.setCashInRegister(textIO);
                        break;
                }
            
                page = textIO.newStringInputReader().withDefaultValue("buy")
                        .withInlinePossibleValues(new ArrayList<>(helpMenu.getCmds()))
                        .read("Actions");
            } catch (ReadAbortedException e) {
                textIO.getTextTerminal().executeWithPropertiesPrefix("abort",
                        t -> t.println("\n"+e.getPayload()));
                loop = false;
            }
        }
        textIO.newStringInputReader().withMinLength(0).read("\nPress enter to terminate...");
        textIO.dispose();
    }
}
